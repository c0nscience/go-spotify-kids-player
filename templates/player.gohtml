{{define "player"}}
    <header class="bg-slate-700 pl-4 py-4 rounded-md drop-shadow-sm grid grid-cols-5 items-center">
        <img src="{{.Img}}"
             id="player-img"
             class="col-span-2 p-2 draggable z-50"
                {{/*             _="*/}}
                {{/*             on dragstart call event.dataTransfer.setData('id', '{{.ID}}')"*/}}
             alt="playlist cover"/>
        {{/*todo maybe this work https://medium.com/@deepakkadarivel/drag-and-drop-dnd-for-mobile-browsers-fc9bcd1ad3c5*/}}
        <div class="col-span-3 grid grid-cols-2 justify-items-stretch z-0">
            {{range .Rooms}}
                <div class="flex items-center grayscale justify-center rounded-md dropzone"
                     hx-get="/switch"
                     hx-trigger="drop"
                     hx-vals="js:{id: event.dataTransfer.getData('id'), room: '{{.}}'}"
                        {{/*                     _="*/}}
                        {{/*                     on dragover or dragenter halt the event*/}}
                        {{/*                        then add .grayscale-0 to me then add .bg-green-500 to me*/}}
                        {{/*                     on dragleave or drop remove .grayscale-0 from me then remove .bg-green-500 from me"*/}}
                >
                    <img class="w-20 h-20 rounded-md active:blur-sm"
                         id="{{.}}-img"
                         src="/public/icons/rooms/{{.}}.png"
                         alt="colored lego bricks">
                </div>
            {{end}}
        </div>


    </header>

    <script>
      function dragMoveListener(event) {
        const target = event.target
        const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
        const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

        target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'

        target.setAttribute('data-x', x)
        target.setAttribute('data-y', y)
      }

      htmx.onLoad(function (content) {
        interact('.draggable')
          .draggable({
            listeners: {
              move: dragMoveListener,
              // start (event) {
              //   event.target.classList.add('touch-none')
              // },
              // end (event) {
              //   event.target.classList.remove('touch-none')
              // },
            }
          })

        interact('.dropzone')
          .dropzone({
            accept: '#player-img',
            overlap: 0.30,
            ondropactivate: function (event) {
              event.target.classList.add('grayscale-0')
            },
            ondragenter: function (event) {
              const draggableElement = event.relatedTarget
              const dropzoneElement = event.target

              dropzoneElement.classList.add('bg-green-500')
              draggableElement.classList.add('opacity-15')
            },
            ondragleave: function (event) {
              const draggableElement = event.relatedTarget
              const dropzoneElement = event.target

              dropzoneElement.classList.remove('bg-green-500')
              draggableElement.classList.remove('opacity-15')
            },
            ondropdeactivate: function (event) {
              event.target.classList.remove('grayscale-0')
            },
          })
      })
    </script>
{{end}}